#!/bin/bash

### BEGIN INIT INFO
# Provides: hibera
# Required-Start: $network $local_fs $remote_fs
# Should-Start:
# Required-Stop:
# Default-Start: 2 3 4 5
# Default-Stop: 0 1 6
# Short-Description:
# Description:
### END INIT INFO

EXEC=/usr/bin/hiberad

[ -f /etc/hibera.conf ] && . /etc/hibera.conf

ARGS=""
[ ! "x$HIBERA_ROOT" = "x" ] && ARGS="$ARGS -root=$HIBERA_ROOT"
[ ! "x$HIBERA_BIND" = "x" ] && ARGS="$ARGS -bind=$HIBERA_BIND"
[ ! "x$HIBERA_PORT" = "x" ] && ARGS="$ARGS -port=$HIBERA_PORT"
[ ! "x$HIBERA_DOMAIN" = "x" ] && ARGS="$ARGS -domain=$HIBERA_DOMAIN"
[ ! "x$HIBERA_URL" = "x" ] && ARGS="$ARGS -url=$HIBERA_URL"
[ ! "x$HIBERA_KEYS" = "x" ] && ARGS="$ARGS -keys=$HIBERA_KEYS"
[ ! "x$HIBERA_DATA" = "x" ] && ARGS="$ARGS -data=$HIBERA_DATA"
[ ! "x$HIBERA_LOG" = "x" ] && ARGS="$ARGS -log=$HIBERA_LOG"
[ ! "x$HIBERA_SEEDS" = "x" ] && ARGS="$ARGS -seeds=$HIBERA_SEEDS"
[ ! "x$HIBERA_PROFILE" = "x" ] && ARGS="$ARGS -profile=$HIBERA_PROFILE"

function running() {
    pidof $EXEC >/dev/null 2>&1
    return $?
}

function start() {
    if running; then
        echo "running"
        return 1
    else
        (cd / && nohup $EXEC run $ARGS </dev/null 2>&1 | logger -t hibera) &
        echo "started"
        return 0
    fi
}
function stop() {
    if running; then
        echo "stopped"
        PID=$(pidof $EXEC)
        if ! kill $PID; then
            return $?
        fi
        COUNT=0
        while ps $PID >/dev/null 2>&1; do
            if [ $COUNT -ge 10 ]; then
                return 1
            fi
            sleep 1
            COUNT=$(($COUNT+1))
        done
        return 0
    else
        return 1
    fi
}
function restart() {
    kill -HUP $(pidof $EXEC) >/dev/null 2>&1
    return $?
}
function reload() {
    stop && start
    return $?
}
function status() {
    if running; then
        echo "running"
        return 0
    else
        echo "stopped"
        return 1
    fi
}

case "$1" in
  start)
    start
    exit $?
    ;;
  stop)
    stop
    exit $?
    ;;
  restart)
    restart
    exit $?
    ;;
  force-reload)
    reload
    exit $?
    ;;
  status)
    status
    exit $?
    ;;
  *)
    echo "usage: $0 {start|stop|restart|force-reload|status}"
    exit 2
esac
